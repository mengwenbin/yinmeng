package com.xiaoxu.music.community.view;

import android.animation.Animator;
import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Color;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewPropertyAnimator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.widget.RelativeLayout;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import com.lidroid.xutils.BitmapUtils;
import com.xiaoxu.music.community.R;
import com.xiaoxu.music.community.constant.Constant;
import com.xiaoxu.music.community.entity.BarrageInfoEntity;
import com.xiaoxu.music.community.util.ActivityUtil;
import com.xiaoxu.music.community.util.StringUtil;
import com.xiaoxu.music.community.view.custom_shape_imageview.CircleImageView;

/**
 * Created by caizhiming on 2015/10/11.
 */
public class DanmuView extends RelativeLayout {
	
    private int mRowNum = 5;
    private int mMaxShowNum = 15;
    private int[] mSpeeds = {
            4000,5000,6000,7000,8000};
    private int[] mRowPos = {
            150,170,140,150,160};
    private int mDelayDuration = 1000;
    
    private Random mRandom;
    private Context mContext;
    private int mScreenWidth;
    private boolean mIsWorking = false;
    private List<View> mChildList;
    private BitmapUtils bitmapUtils;
    private List<BarrageInfoEntity> barrageList;
    
    public static enum XCDirection{
        FROM_RIGHT_TO_LEFT,
        FORM_LEFT_TO_RIGHT
    }
    public enum XCAction{
        SHOW,HIDE
    }
    private XCDirection mDirection = XCDirection.FROM_RIGHT_TO_LEFT;

    private Handler mHandler = new Handler() {
        @SuppressLint("NewApi")
		@Override
        public void handleMessage(final Message msg) {
            super.handleMessage(msg);
            final int pos = msg.what;
            ViewPropertyAnimator animator;
            if(mDirection == XCDirection.FROM_RIGHT_TO_LEFT){
                animator = mChildList.get(pos).animate()
                        .translationXBy(-(mScreenWidth + mChildList.get(pos).getWidth()));
            }else{
                animator = mChildList.get(pos).animate()
                        .translationXBy(mScreenWidth + mChildList.get(pos).getWidth());
            }

            Random random = new Random(System.currentTimeMillis());
            int index = random.nextInt(100) % mSpeeds.length;
            animator.setDuration(mSpeeds[index]);
            animator.setInterpolator(new LinearInterpolator());
            animator.setListener(new Animator.AnimatorListener() {
                @Override
                public void onAnimationStart(Animator animator) {

                }

                @Override
                public void onAnimationEnd(Animator animator) {
                    DanmuView.this.removeView(mChildList.get(pos));
                    int index = mRandom.nextInt(100) % barrageList.size();
                    createDanmuView(pos, barrageList.get(index), true);
                    mHandler.sendEmptyMessageDelayed(pos, mDelayDuration);
                }

                @Override
                public void onAnimationCancel(Animator animator) {

                }

                @Override
                public void onAnimationRepeat(Animator animator) {

                }
            });
            animator.start();
        }
    };

    public DanmuView(Context context) {
        this(context, null, 0);
    }
    public DanmuView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }
    public DanmuView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        mContext = context;
        init();
    }
    public boolean isWorking(){
        return mIsWorking;
    }
    private void init() {
        mScreenWidth = ActivityUtil.getScreenWidth(mContext);
        mChildList = new ArrayList<View>();
        mRandom = new Random();
        bitmapUtils = new BitmapUtils(mContext, Constant.DISK_CACHE_PATH,Constant.MAX_MEMORY_SIZE);
        bitmapUtils.configDefaultLoadingImage(R.drawable.test_default_head_bg_blue);// 默认背景图片
        bitmapUtils.configDefaultLoadFailedImage(R.drawable.test_default_head_bg_blue);// 加载失败图片
    }
    public void setDirection(XCDirection direction){
        mDirection = direction;
    }
    int lastRow = 0;
    public void initDanmuItemViews(List<BarrageInfoEntity> barrageList){
    	this.barrageList = barrageList;
        for(int i = 0; i < mMaxShowNum; i ++){
            int index =  mRandom.nextInt(100) % barrageList.size();
            createDanmuView(i,barrageList.get(index),false);
        }
    }
    public void createDanmuView(int index,BarrageInfoEntity barrageInfoEntity, boolean reset){
    	
    	View view = LayoutInflater.from(mContext).inflate(R.layout.barrage_item, null);
		CircleImageView circleImageView = (CircleImageView) view.findViewById(R.id.head_icon); 
		TextView con = (TextView) view.findViewById(R.id.barrage_content);
		
		bitmapUtils.display(circleImageView, StringUtil.replaceImagePath(barrageInfoEntity.getUser().getUser_img(), 100));
    	Random random = new Random();
		int r = random.nextInt(255);
		int g = random.nextInt(255);
		int b = random.nextInt(255);
		Color color = new Color();
		con.setTextColor(color.rgb(r, g, b));
		con.setText(barrageInfoEntity.getBarrage_body());
        RelativeLayout.LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
        int row = mRandom.nextInt(100) % mRowNum;
        while(row == lastRow){
            row = mRandom.nextInt(100)% mRowNum;
        }
        int pos = mRandom.nextInt(100)% mRowNum;
        lp.topMargin = row * mRowPos[pos];
        lastRow = row;
        view.setLayoutParams(lp);
        this.addView(view);
        if(reset){
            mChildList.set(index,view);
        }else{
            mChildList.add(index,view);
        }
    }
	boolean isFirst = true;
    public void start(){
        switchAnimation(XCAction.SHOW);
        if(isFirst){
            for(int i =0;i< mChildList.size();i++){
                mHandler.sendEmptyMessageDelayed(i,i * mDelayDuration);
            }
            isFirst = false;
        }

        mIsWorking = true;
    }
    public void hide(){
        switchAnimation(XCAction.HIDE);
        mIsWorking =false;
    }
    public void stop(){
        this.setVisibility(View.GONE);
        for(int i =0;i< mChildList.size();i++){
            mChildList.get(i).clearAnimation();
            mHandler.removeMessages(i);
        }
        mIsWorking =false;
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);
        int childCount = this.getChildCount();
        for(int i=0;i<childCount;i++){
            View view = getChildAt(i);
            RelativeLayout.LayoutParams lp = (LayoutParams) view.getLayoutParams();
            if(lp.leftMargin <= 0){
                if(mDirection == XCDirection.FORM_LEFT_TO_RIGHT){
                    view.layout(-view.getMeasuredWidth(), lp.topMargin,
                            0,lp.topMargin + view.getMeasuredHeight());
                }else{
                    view.layout(mScreenWidth,lp.topMargin,mScreenWidth+view.getMeasuredWidth(),
                            lp.topMargin+view.getMeasuredHeight());
                }

            }else{
                continue;
            }
        }

    }
    

    private void switchAnimation(final XCAction action){
        AlphaAnimation animation;
        if(action == XCAction.HIDE){
            animation = new AlphaAnimation(1.0f,0.0f);
            animation.setDuration(1000);
        }else{
            animation = new AlphaAnimation(0.0f,1.0f);
            animation.setDuration(1000);
        }
        DanmuView.this.startAnimation(animation);
        animation.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }
            @Override
            public void onAnimationEnd(Animation animation) {
            	
                if(action == XCAction.HIDE){
                    DanmuView.this.setVisibility(View.GONE);
                }else{
                    DanmuView.this.setVisibility(View.VISIBLE);
                }
            }
            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
    }
}
