package com.xiaoxu.music.community.activity;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

import com.umeng.analytics.AnalyticsConfig;
import com.umeng.analytics.MobclickAgent;
import com.xiaoxu.music.community.BaseNewActivity;
import com.xiaoxu.music.community.R;
import com.xiaoxu.music.community.fragment.SearchMusicFragment;
import com.xiaoxu.music.community.fragment.SearchUserFragment;
import com.xiaoxu.music.community.view.CustomViewPager;

public class SearchActivity extends BaseNewActivity {
	
	private EditText searchText;
	private String key = "";
	
	private View line_music, line_user;
	private TextView tv_music, tv_user;
	
	private CustomViewPager viewpager;
	private ViewPagerAdapter adapter;
	private SearchMusicFragment frag_music;
	private SearchUserFragment frag_user;
	
	private final String mPageName = "SearchActivity";
	
	@Override
	public void setContent() {
		// TODO Auto-generated method stub
		setContentView(R.layout.activity_search);
		// 发送策略定义了用户由统计分析SDK产生的数据发送回友盟服务器的频率。
		MobclickAgent.updateOnlineConfig(this);
		// SDK会对日志进行加密。加密模式可以有效防止网络攻击，提高数据安全性。
		AnalyticsConfig.enableEncrypt(true);
	}

	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onPageStart(mPageName);// 友盟统计
		MobclickAgent.onResume(this);// 友盟统计
	}

	@Override
	protected void onPause() {
		super.onPause();
		MobclickAgent.onPageEnd(mPageName);
		MobclickAgent.onPause(this);
	}

	@Override
	public void setupView() {
		// TODO Auto-generated method stub
		searchText = getEditText(R.id.search_view);
		searchText.setOnEditorActionListener(new OnEditorActionListener() {
			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				if (actionId == EditorInfo.IME_ACTION_SEARCH) {
					key = v.getText().toString().trim();
					frag_music.search(key);
					frag_user.search(key);
					return true;
				}
				return false;
			}
		});
		viewpager = (CustomViewPager) getViewPager(R.id.viewpager_search);
		viewpager.setOnPageChangeListener(listener);
		viewpager.setScanScroll(true);
		
		line_music = findViewById(R.id.line_music);
		line_user = findViewById(R.id.line_user);
		tv_music = getTextView(R.id.select_music);
		tv_user = getTextView(R.id.select_user);
	}

	@Override
	public void setModel() {
		// TODO Auto-generated method stub
		frag_music = new SearchMusicFragment();
		frag_user = new SearchUserFragment();
		adapter = new ViewPagerAdapter(getSupportFragmentManager());
		viewpager.setAdapter(adapter);
	}
	
	OnPageChangeListener listener = new OnPageChangeListener() {
		
		@Override
		public void onPageSelected(int arg0) {
			// TODO Auto-generated method stub
			if(arg0 == 0){
				line_music.setBackgroundColor(getResources().getColor(R.color.tab_text_select));
				line_user.setBackgroundColor(getResources().getColor(R.color.white));
				tv_music.setTextColor(getResources().getColor(R.color.tab_text_select));
				tv_user.setTextColor(getResources().getColor(R.color.tab_text_normal));
			} else {
				line_music.setBackgroundColor(getResources().getColor(R.color.white));
				line_user.setBackgroundColor(getResources().getColor(R.color.tab_text_select));
				tv_music.setTextColor(getResources().getColor(R.color.tab_text_normal));
				tv_user.setTextColor(getResources().getColor(R.color.tab_text_select));
			}
		}

		@Override
		public void onPageScrolled(int arg0, float arg1, int arg2) {
			// TODO Auto-generated method stub
		}

		@Override
		public void onPageScrollStateChanged(int arg0) {
			// TODO Auto-generated method stub
		}
	};
	
	public class ViewPagerAdapter extends FragmentStatePagerAdapter {
		
		private Fragment fragment;
		
		public ViewPagerAdapter(FragmentManager fm) {
			super(fm);
		}
		
		@Override
		public Fragment getItem(int arg0) {
			// TODO Auto-generated method stub
			switch (arg0) {
			case 0:
				fragment = frag_music;
				break;
			case 1:
				fragment = frag_user;
				break;
			default:
				break;
			}
			return fragment;
		}
		
		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return 2;
		}
		
		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			// TODO Auto-generated method stub
			super.destroyItem(container, position, object);
		}
	}

}
