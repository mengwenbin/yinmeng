package com.xiaoxu.music.community.receiver;


import com.xiaoxu.music.community.activity.MainTabActivity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import cn.jpush.android.api.JPushInterface;

/**
 * 自定义接收器
 * 
 * 如果不定义这个 Receiver，则：
 * 1) 默认用户会打开主界面
 * 2) 接收不到自定义消息
 */
public class JPushReceiver extends BroadcastReceiver {
	
	@Override
	public void onReceive(Context context, Intent intent) {
        Bundle bundle = intent.getExtras();
        if (JPushInterface.ACTION_REGISTRATION_ID.equals(intent.getAction())) {
        	//SDK 向 JPush Server 注册所得到的注册 全局唯一的 ID ，可以通过此 ID 向对应的客户端发送消息和通知。
            String regId = bundle.getString(JPushInterface.EXTRA_REGISTRATION_ID);
        } else if (JPushInterface.ACTION_MESSAGE_RECEIVED.equals(intent.getAction())) {
        	//收到了自定义消息 Push
        	processCustomMessage(context, bundle);
        } else if (JPushInterface.ACTION_NOTIFICATION_RECEIVED.equals(intent.getAction())) {
            //接收到推送下来的通知, 在这里可以做些统计，或者做些其他工作
        	processNotification(context, bundle);
        } else if (JPushInterface.ACTION_NOTIFICATION_OPENED.equals(intent.getAction())) {
            //用户点击打开了通知 , 打开自定义的Activity
        	Intent i = new Intent(context, MainTabActivity.class);
        	i.putExtras(bundle);
        	i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        	i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP );
        	context.startActivity(i);
        } else if (JPushInterface.ACTION_RICHPUSH_CALLBACK.equals(intent.getAction())) {
        	//在这里根据 JPushInterface.EXTRA_EXTRA 的内容处理代码，比如打开新的Activity， 打开一个网页等..
            String http = bundle.getString(JPushInterface.EXTRA_EXTRA);
        } else if(JPushInterface.ACTION_CONNECTION_CHANGE.equals(intent.getAction())) {
        	boolean connected = intent.getBooleanExtra(JPushInterface.EXTRA_CONNECTION_CHANGE, false);
        } else {
        	
        }
	}

	// 打印所有的 intent extra 数据
	private static String printBundle(Bundle bundle) {
		StringBuilder sb = new StringBuilder();
		for (String key : bundle.keySet()) {
			if (key.equals(JPushInterface.EXTRA_NOTIFICATION_ID)) {
				sb.append("\nkey:" + key + ", value:" + bundle.getInt(key));
			}else if(key.equals(JPushInterface.EXTRA_CONNECTION_CHANGE)){
				sb.append("\nkey:" + key + ", value:" + bundle.getBoolean(key));
			} 
			else {
				sb.append("\nkey:" + key + ", value:" + bundle.getString(key));
			}
		}
		return sb.toString();
	}
	
	private void processNotification(Context context, Bundle bundle){
		//保存服务器推送下来的通知的标题。对应 API 通知内容的 title 字段。
		//对应 Portal 推送通知界面上的“通知标题”字段。
		String title = bundle.getString(JPushInterface.EXTRA_NOTIFICATION_TITLE);
		//保存服务器推送下来的通知内容。对应 API 通知内容的 alert 字段。
		//对应 Portal 推送通知界面上的“通知内容”字段。
		String content = bundle.getString(JPushInterface.EXTRA_ALERT);
		//保存服务器推送下来的附加字段。这是个 JSON 字符串。对应 API 通知内容的 extras 字段。
		//对应 Portal 推送消息界面上的“可选设置”里的附加字段。
		String extras = bundle.getString(JPushInterface.EXTRA_EXTRA);
		//通知栏的Notification ID，可以用于清除Notification
		int notificationId = bundle.getInt(JPushInterface.EXTRA_NOTIFICATION_ID);
		//保存服务器推送下来的内容类型。对应 API 消息内容的 content_type 字段。
		//Portal 上暂时未提供输入字段。
		String type = bundle.getString(JPushInterface.EXTRA_CONTENT_TYPE);
		//富媒体通知推送下载的HTML的文件路径,用于展现WebView。
		String fileHtml = bundle.getString(JPushInterface.EXTRA_RICHPUSH_HTML_PATH);
		//富媒体通知推送下载的图片资源的文件名,多个文件名用 “，” 分开。 与 “JPushInterface.EXTRA_RICHPUSH_HTML_PATH” 位于同一个路径。
//		String fileStr = bundle.getString(JPushInterface.EXTRA_RICHPUSH_HTML_RES);
//		String[] fileNames = fileStr.split(",");
		//唯一标识通知消息的 ID, 可用于上报统计等。
		String file = bundle.getString(JPushInterface.EXTRA_MSG_ID);
	}
	
	//send msg to MainActivity
	private void processCustomMessage(Context context, Bundle bundle) {
		//保存服务器推送下来的消息的标题。对应 API 消息内容的 title 字段。
		//Portal 推送消息界上不作展示
		String title = bundle.getString(JPushInterface.EXTRA_TITLE);
		//保存服务器推送下来的消息内容。对应 API 消息内容的 message 字段。
		//对应 Portal 推送消息界面上的"自定义消息内容”字段。
		String message = bundle.getString(JPushInterface.EXTRA_MESSAGE);
		//保存服务器推送下来的附加字段。这是个 JSON 字符串。对应 API 消息内容的 extras 字段。
		//对应 Portal 推送消息界面上的“可选设置”里的附加字段。
		//json解析
		String extras = bundle.getString(JPushInterface.EXTRA_EXTRA);
		//保存服务器推送下来的内容类型。对应 API 消息内容的 content_type 字段。
		String type = bundle.getString(JPushInterface.EXTRA_CONTENT_TYPE);
		//SDK 1.4.0 以上版本支持。   富媒体通消息推送下载后的文件路径和文件名。
		String file = bundle.getString(JPushInterface.EXTRA_RICHPUSH_FILE_PATH);
		//SDK 1.6.1 以上版本支持。
		//唯一标识消息的 ID, 可用于上报统计等。
		String file2 = bundle.getString(JPushInterface.EXTRA_MSG_ID);
	}
}
